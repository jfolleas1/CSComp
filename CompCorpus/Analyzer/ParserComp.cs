// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  FIDF3675368
// DateTime: 29/06/2017 12:00:18
// UserName: j.folleas
// Input file <ParserComp.y - 29/06/2017 12:00:14>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using CompCorpus.RunTime;
using CompCorpus.RunTime.declaration;
using CompCorpus.RunTime.Bricks;

namespace CompCorpus.Analyzer
{
public enum Tokens {error=2,EOF=3,TITREACTEKW=4,TRUE=5,FALSE=6,
    DOLLAR=7,PLUS=8,MINUS=9,MUL=10,DIV=11,PARENTOPEN=12,
    PARENTCLOSE=13,BRACEOPEN=14,BRACECLOSE=15,AND=16,OR=17,NOT=18,
    EGALE=19,INF=20,INFEGALE=21,SUP=22,SUPEGALE=23,ASSIGN=24,
    SEMICOLON=25,COMMA=26,COLON=27,SEPARATOR=28,CODEINDIC=29,NOUVLIGNE=30,
    NOUVPARAG=31,CHOIXCKW=32,OPTIONCKW=33,CONDITIONCKW=34,POURCHAQUECKW=35,ID=36,
    STRING=37,INTEGER=38,FLOAT=39,DEADWORD=40,TITLEID=41};

public struct ValueType
{
        public string String;
        public long Integer;
        public double Float;
		public Affectation affectation;
		public AbstractExpression expression;
		public Variable constante;
		public VariableId variable ;
		public Declaration declaration ;
		public List<Declaration> listDeclaration ;
		public List<Affectation> listAffectation ;
		public Brick brick ;
		public List<Brick> listBrick ;
		public VariableCall variableCall;
		public Title Title;
		public Proposition proposition;
		public List<Proposition> listProposition;
		public Choice choice;
		public Option option;
		public Condition condition;
		public Iteration iteration;
		public IteratorStr iterator; 

}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from ParserComp.y - 29/06/2017 12:00:14
    
    public Montage montage = new Montage();

  // End verbatim content from ParserComp.y - 29/06/2017 12:00:14

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[90];
  private static State[] states = new State[159];
  private static string[] nonTerms = new string[] {
      "montage", "affectation", "expression", "constante", "var", "listAffectation", 
      "listAffectationBis", "defActeTitle", "deadText", "declaredVariableName", 
      "declaredVariableType", "affectationType", "declaration", "listDeclaration", 
      "textBloc", "textBlocElement", "brick", "document", "listBrick", "callVar", 
      "title", "titleContent", "titleContentElement", "choice", "listProposition", 
      "proposition", "option", "condition", "iteration", "iterator", "$accept", 
      };

  static Parser() {
    states[0] = new State(new int[]{4,151,3,-2},new int[]{-1,1,-8,3});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-9,new int[]{-14,4});
    states[4] = new State(new int[]{28,5,36,150},new int[]{-13,142,-10,143});
    states[5] = new State(-15,new int[]{-6,6,-7,133});
    states[6] = new State(new int[]{28,8,3,-40},new int[]{-18,7});
    states[7] = new State(-3);
    states[8] = new State(-42,new int[]{-19,9});
    states[9] = new State(new int[]{40,13,36,14,7,15,12,16,13,17,25,18,26,19,27,20,38,21,39,22,37,23,30,24,31,25,29,28,32,33,33,52,41,62,34,81,35,89,3,-41},new int[]{-17,10,-15,11,-16,26,-20,27,-24,32,-27,51,-21,61,-28,80,-29,88});
    states[10] = new State(-43);
    states[11] = new State(new int[]{40,13,36,14,7,15,12,16,13,17,25,18,26,19,27,20,38,21,39,22,37,23,30,24,31,25,29,-44,32,-44,33,-44,41,-44,34,-44,35,-44,3,-44,15,-44},new int[]{-16,12});
    states[12] = new State(-52);
    states[13] = new State(-53);
    states[14] = new State(-54);
    states[15] = new State(-55);
    states[16] = new State(-56);
    states[17] = new State(-57);
    states[18] = new State(-58);
    states[19] = new State(-59);
    states[20] = new State(-60);
    states[21] = new State(-61);
    states[22] = new State(-62);
    states[23] = new State(-63);
    states[24] = new State(-64);
    states[25] = new State(-65);
    states[26] = new State(-51);
    states[27] = new State(-45);
    states[28] = new State(new int[]{14,29});
    states[29] = new State(new int[]{36,30});
    states[30] = new State(new int[]{15,31});
    states[31] = new State(-81);
    states[32] = new State(-46);
    states[33] = new State(new int[]{12,34});
    states[34] = new State(new int[]{36,35});
    states[35] = new State(new int[]{26,36});
    states[36] = new State(new int[]{37,37});
    states[37] = new State(new int[]{13,38});
    states[38] = new State(new int[]{14,39});
    states[39] = new State(new int[]{12,43},new int[]{-25,40,-26,132});
    states[40] = new State(new int[]{15,41,12,43},new int[]{-26,42});
    states[41] = new State(-82);
    states[42] = new State(-84);
    states[43] = new State(new int[]{36,44});
    states[44] = new State(new int[]{26,45});
    states[45] = new State(new int[]{37,46});
    states[46] = new State(new int[]{13,47});
    states[47] = new State(new int[]{14,48});
    states[48] = new State(-42,new int[]{-19,49});
    states[49] = new State(new int[]{15,50,40,13,36,14,7,15,12,16,13,17,25,18,26,19,27,20,38,21,39,22,37,23,30,24,31,25,29,28,32,33,33,52,41,62,34,81,35,89},new int[]{-17,10,-15,11,-16,26,-20,27,-24,32,-27,51,-21,61,-28,80,-29,88});
    states[50] = new State(-85);
    states[51] = new State(-47);
    states[52] = new State(new int[]{12,53});
    states[53] = new State(new int[]{36,54});
    states[54] = new State(new int[]{26,55});
    states[55] = new State(new int[]{37,56});
    states[56] = new State(new int[]{13,57});
    states[57] = new State(new int[]{14,58});
    states[58] = new State(-42,new int[]{-19,59});
    states[59] = new State(new int[]{15,60,40,13,36,14,7,15,12,16,13,17,25,18,26,19,27,20,38,21,39,22,37,23,30,24,31,25,29,28,32,33,33,52,41,62,34,81,35,89},new int[]{-17,10,-15,11,-16,26,-20,27,-24,32,-27,51,-21,61,-28,80,-29,88});
    states[60] = new State(-86);
    states[61] = new State(-48);
    states[62] = new State(new int[]{14,63});
    states[63] = new State(new int[]{40,67,36,68,7,69,12,70,13,71,25,72,26,73,27,74,38,75,39,76,37,77,29,28},new int[]{-22,64,-23,79,-20,78});
    states[64] = new State(new int[]{15,65,40,67,36,68,7,69,12,70,13,71,25,72,26,73,27,74,38,75,39,76,37,77,29,28},new int[]{-23,66,-20,78});
    states[65] = new State(-66);
    states[66] = new State(-68);
    states[67] = new State(-69);
    states[68] = new State(-70);
    states[69] = new State(-71);
    states[70] = new State(-72);
    states[71] = new State(-73);
    states[72] = new State(-74);
    states[73] = new State(-75);
    states[74] = new State(-76);
    states[75] = new State(-77);
    states[76] = new State(-78);
    states[77] = new State(-79);
    states[78] = new State(-80);
    states[79] = new State(-67);
    states[80] = new State(-49);
    states[81] = new State(new int[]{12,82});
    states[82] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,83,-5,126,-4,128});
    states[83] = new State(new int[]{13,84,8,99,10,101,11,103,9,105,16,107,17,109,19,111,20,113,21,115,22,117,23,119});
    states[84] = new State(new int[]{14,85});
    states[85] = new State(-42,new int[]{-19,86});
    states[86] = new State(new int[]{15,87,40,13,36,14,7,15,12,16,13,17,25,18,26,19,27,20,38,21,39,22,37,23,30,24,31,25,29,28,32,33,33,52,41,62,34,81,35,89},new int[]{-17,10,-15,11,-16,26,-20,27,-24,32,-27,51,-21,61,-28,80,-29,88});
    states[87] = new State(-87);
    states[88] = new State(-50);
    states[89] = new State(new int[]{12,90});
    states[90] = new State(new int[]{36,96},new int[]{-30,91});
    states[91] = new State(new int[]{13,92});
    states[92] = new State(new int[]{14,93});
    states[93] = new State(-42,new int[]{-19,94});
    states[94] = new State(new int[]{15,95,40,13,36,14,7,15,12,16,13,17,25,18,26,19,27,20,38,21,39,22,37,23,30,24,31,25,29,28,32,33,33,52,41,62,34,81,35,89},new int[]{-17,10,-15,11,-16,26,-20,27,-24,32,-27,51,-21,61,-28,80,-29,88});
    states[95] = new State(-88);
    states[96] = new State(new int[]{27,97});
    states[97] = new State(new int[]{36,98});
    states[98] = new State(-89);
    states[99] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,100,-5,126,-4,128});
    states[100] = new State(new int[]{8,-21,10,101,11,103,9,-21,16,-21,17,-21,19,-21,20,-21,21,-21,22,-21,23,-21,13,-21,25,-21});
    states[101] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,102,-5,126,-4,128});
    states[102] = new State(-22);
    states[103] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,104,-5,126,-4,128});
    states[104] = new State(-23);
    states[105] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,106,-5,126,-4,128});
    states[106] = new State(new int[]{8,-24,10,101,11,103,9,-24,16,-24,17,-24,19,-24,20,-24,21,-24,22,-24,23,-24,13,-24,25,-24});
    states[107] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,108,-5,126,-4,128});
    states[108] = new State(new int[]{8,99,10,101,11,103,9,105,16,-25,17,-25,19,111,20,113,21,115,22,117,23,119,13,-25,25,-25});
    states[109] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,110,-5,126,-4,128});
    states[110] = new State(new int[]{8,99,10,101,11,103,9,105,16,-26,17,-26,19,111,20,113,21,115,22,117,23,119,13,-26,25,-26});
    states[111] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,112,-5,126,-4,128});
    states[112] = new State(new int[]{8,99,10,101,11,103,9,105,16,-28,17,-28,19,-28,20,-28,21,-28,22,-28,23,-28,13,-28,25,-28});
    states[113] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,114,-5,126,-4,128});
    states[114] = new State(new int[]{8,99,10,101,11,103,9,105,16,-29,17,-29,19,-29,20,-29,21,-29,22,-29,23,-29,13,-29,25,-29});
    states[115] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,116,-5,126,-4,128});
    states[116] = new State(new int[]{8,99,10,101,11,103,9,105,16,-30,17,-30,19,-30,20,-30,21,-30,22,-30,23,-30,13,-30,25,-30});
    states[117] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,118,-5,126,-4,128});
    states[118] = new State(new int[]{8,99,10,101,11,103,9,105,16,-31,17,-31,19,-31,20,-31,21,-31,22,-31,23,-31,13,-31,25,-31});
    states[119] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,120,-5,126,-4,128});
    states[120] = new State(new int[]{8,99,10,101,11,103,9,105,16,-32,17,-32,19,-32,20,-32,21,-32,22,-32,23,-32,13,-32,25,-32});
    states[121] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,122,-5,126,-4,128});
    states[122] = new State(new int[]{8,99,10,101,11,103,9,105,16,-27,17,-27,19,111,20,113,21,115,22,117,23,119,13,-27,25,-27});
    states[123] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,124,-5,126,-4,128});
    states[124] = new State(new int[]{13,125,8,99,10,101,11,103,9,105,16,107,17,109,19,111,20,113,21,115,22,117,23,119});
    states[125] = new State(-33);
    states[126] = new State(-34);
    states[127] = new State(-36);
    states[128] = new State(-35);
    states[129] = new State(-37);
    states[130] = new State(-38);
    states[131] = new State(-39);
    states[132] = new State(-83);
    states[133] = new State(new int[]{36,127,28,-14,3,-14},new int[]{-2,134,-5,135});
    states[134] = new State(-16);
    states[135] = new State(new int[]{36,141,24,-19},new int[]{-12,136,-11,140});
    states[136] = new State(new int[]{24,137});
    states[137] = new State(new int[]{18,121,12,123,36,127,38,129,39,130,37,131},new int[]{-3,138,-5,126,-4,128});
    states[138] = new State(new int[]{25,139,8,99,10,101,11,103,9,105,16,107,17,109,19,111,20,113,21,115,22,117,23,119});
    states[139] = new State(-17);
    states[140] = new State(-18);
    states[141] = new State(-20);
    states[142] = new State(-10);
    states[143] = new State(new int[]{36,141},new int[]{-11,144});
    states[144] = new State(new int[]{25,145,14,146});
    states[145] = new State(-11);
    states[146] = new State(-9,new int[]{-14,147});
    states[147] = new State(new int[]{15,148,36,150},new int[]{-13,142,-10,143});
    states[148] = new State(new int[]{25,149});
    states[149] = new State(-12);
    states[150] = new State(-13);
    states[151] = new State(new int[]{14,152});
    states[152] = new State(new int[]{40,157,36,158},new int[]{-9,153});
    states[153] = new State(new int[]{15,154,40,155,36,156});
    states[154] = new State(-4);
    states[155] = new State(-7);
    states[156] = new State(-8);
    states[157] = new State(-5);
    states[158] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-31, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-8,-14,28,-6,-18});
    rules[4] = new Rule(-8, new int[]{4,14,-9,15});
    rules[5] = new Rule(-9, new int[]{40});
    rules[6] = new Rule(-9, new int[]{36});
    rules[7] = new Rule(-9, new int[]{-9,40});
    rules[8] = new Rule(-9, new int[]{-9,36});
    rules[9] = new Rule(-14, new int[]{});
    rules[10] = new Rule(-14, new int[]{-14,-13});
    rules[11] = new Rule(-13, new int[]{-10,-11,25});
    rules[12] = new Rule(-13, new int[]{-10,-11,14,-14,15,25});
    rules[13] = new Rule(-10, new int[]{36});
    rules[14] = new Rule(-6, new int[]{-7});
    rules[15] = new Rule(-7, new int[]{});
    rules[16] = new Rule(-7, new int[]{-7,-2});
    rules[17] = new Rule(-2, new int[]{-5,-12,24,-3,25});
    rules[18] = new Rule(-12, new int[]{-11});
    rules[19] = new Rule(-12, new int[]{});
    rules[20] = new Rule(-11, new int[]{36});
    rules[21] = new Rule(-3, new int[]{-3,8,-3});
    rules[22] = new Rule(-3, new int[]{-3,10,-3});
    rules[23] = new Rule(-3, new int[]{-3,11,-3});
    rules[24] = new Rule(-3, new int[]{-3,9,-3});
    rules[25] = new Rule(-3, new int[]{-3,16,-3});
    rules[26] = new Rule(-3, new int[]{-3,17,-3});
    rules[27] = new Rule(-3, new int[]{18,-3});
    rules[28] = new Rule(-3, new int[]{-3,19,-3});
    rules[29] = new Rule(-3, new int[]{-3,20,-3});
    rules[30] = new Rule(-3, new int[]{-3,21,-3});
    rules[31] = new Rule(-3, new int[]{-3,22,-3});
    rules[32] = new Rule(-3, new int[]{-3,23,-3});
    rules[33] = new Rule(-3, new int[]{12,-3,13});
    rules[34] = new Rule(-3, new int[]{-5});
    rules[35] = new Rule(-3, new int[]{-4});
    rules[36] = new Rule(-5, new int[]{36});
    rules[37] = new Rule(-4, new int[]{38});
    rules[38] = new Rule(-4, new int[]{39});
    rules[39] = new Rule(-4, new int[]{37});
    rules[40] = new Rule(-18, new int[]{});
    rules[41] = new Rule(-18, new int[]{28,-19});
    rules[42] = new Rule(-19, new int[]{});
    rules[43] = new Rule(-19, new int[]{-19,-17});
    rules[44] = new Rule(-17, new int[]{-15});
    rules[45] = new Rule(-17, new int[]{-20});
    rules[46] = new Rule(-17, new int[]{-24});
    rules[47] = new Rule(-17, new int[]{-27});
    rules[48] = new Rule(-17, new int[]{-21});
    rules[49] = new Rule(-17, new int[]{-28});
    rules[50] = new Rule(-17, new int[]{-29});
    rules[51] = new Rule(-15, new int[]{-16});
    rules[52] = new Rule(-15, new int[]{-15,-16});
    rules[53] = new Rule(-16, new int[]{40});
    rules[54] = new Rule(-16, new int[]{36});
    rules[55] = new Rule(-16, new int[]{7});
    rules[56] = new Rule(-16, new int[]{12});
    rules[57] = new Rule(-16, new int[]{13});
    rules[58] = new Rule(-16, new int[]{25});
    rules[59] = new Rule(-16, new int[]{26});
    rules[60] = new Rule(-16, new int[]{27});
    rules[61] = new Rule(-16, new int[]{38});
    rules[62] = new Rule(-16, new int[]{39});
    rules[63] = new Rule(-16, new int[]{37});
    rules[64] = new Rule(-16, new int[]{30});
    rules[65] = new Rule(-16, new int[]{31});
    rules[66] = new Rule(-21, new int[]{41,14,-22,15});
    rules[67] = new Rule(-22, new int[]{-23});
    rules[68] = new Rule(-22, new int[]{-22,-23});
    rules[69] = new Rule(-23, new int[]{40});
    rules[70] = new Rule(-23, new int[]{36});
    rules[71] = new Rule(-23, new int[]{7});
    rules[72] = new Rule(-23, new int[]{12});
    rules[73] = new Rule(-23, new int[]{13});
    rules[74] = new Rule(-23, new int[]{25});
    rules[75] = new Rule(-23, new int[]{26});
    rules[76] = new Rule(-23, new int[]{27});
    rules[77] = new Rule(-23, new int[]{38});
    rules[78] = new Rule(-23, new int[]{39});
    rules[79] = new Rule(-23, new int[]{37});
    rules[80] = new Rule(-23, new int[]{-20});
    rules[81] = new Rule(-20, new int[]{29,14,36,15});
    rules[82] = new Rule(-24, new int[]{32,12,36,26,37,13,14,-25,15});
    rules[83] = new Rule(-25, new int[]{-26});
    rules[84] = new Rule(-25, new int[]{-25,-26});
    rules[85] = new Rule(-26, new int[]{12,36,26,37,13,14,-19,15});
    rules[86] = new Rule(-27, new int[]{33,12,36,26,37,13,14,-19,15});
    rules[87] = new Rule(-28, new int[]{34,12,-3,13,14,-19,15});
    rules[88] = new Rule(-29, new int[]{35,12,-30,13,14,-19,15});
    rules[89] = new Rule(-30, new int[]{36,27,36});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // montage -> /* empty */
{ Console.WriteLine(" Empty programe "); }
        break;
      case 3: // montage -> defActeTitle, listDeclaration, SEPARATOR, listAffectation, document
{  montage.nameOfTheMontage=ValueStack[ValueStack.Depth-5].String; montage.listOfDeclarations=ValueStack[ValueStack.Depth-4].listDeclaration; montage.listOfBricks=ValueStack[ValueStack.Depth-1].listBrick; }
        break;
      case 4: // defActeTitle -> TITREACTEKW, BRACEOPEN, deadText, BRACECLOSE
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-2].String; }
        break;
      case 5: // deadText -> DEADWORD
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 6: // deadText -> ID
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 7: // deadText -> deadText, DEADWORD
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-2].String + " " + ValueStack[ValueStack.Depth-1].String; }
        break;
      case 8: // deadText -> deadText, ID
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-2].String + " " + ValueStack[ValueStack.Depth-1].String; }
        break;
      case 9: // listDeclaration -> /* empty */
{ CurrentSemanticValue.listDeclaration = new List<Declaration>(); }
        break;
      case 10: // listDeclaration -> listDeclaration, declaration
{ CurrentSemanticValue.listDeclaration=ValueStack[ValueStack.Depth-2].listDeclaration; CurrentSemanticValue.listDeclaration.Add(ValueStack[ValueStack.Depth-1].declaration); }
        break;
      case 11: // declaration -> declaredVariableName, declaredVariableType, SEMICOLON
{ CurrentSemanticValue.declaration = new Declaration(ValueStack[ValueStack.Depth-3].String, ValueStack[ValueStack.Depth-2].String); montage.IsValideTypeString(ValueStack[ValueStack.Depth-2].String,LocationStack[LocationStack.Depth-2].StartLine, LocationStack[LocationStack.Depth-2].StartColumn); montage.AddSymbole(CurrentSemanticValue.declaration); }
        break;
      case 12: // declaration -> declaredVariableName, declaredVariableType, BRACEOPEN, 
               //                listDeclaration, BRACECLOSE, SEMICOLON
{ CurrentSemanticValue.declaration = new DeclarationStruct(ValueStack[ValueStack.Depth-6].String, ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-3].listDeclaration); montage.IsValideTypeString(ValueStack[ValueStack.Depth-5].String,LocationStack[LocationStack.Depth-5].StartLine, LocationStack[LocationStack.Depth-5].StartColumn); montage.AddSymbole(CurrentSemanticValue.declaration.GetSymboles()); 
																												  montage.AddFunctionForList(CurrentSemanticValue.declaration); }
        break;
      case 13: // declaredVariableName -> ID
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 14: // listAffectation -> listAffectationBis
{ CurrentSemanticValue.listAffectation = ValueStack[ValueStack.Depth-1].listAffectation; montage.AddListCalculExpression(ValueStack[ValueStack.Depth-1].listAffectation);}
        break;
      case 15: // listAffectationBis -> /* empty */
{ CurrentSemanticValue.listAffectation = new List<Affectation>();  }
        break;
      case 16: // listAffectationBis -> listAffectationBis, affectation
{ CurrentSemanticValue.listAffectation=ValueStack[ValueStack.Depth-2].listAffectation; CurrentSemanticValue.listAffectation.Add(ValueStack[ValueStack.Depth-1].affectation);  }
        break;
      case 17: // affectation -> var, affectationType, ASSIGN, expression, SEMICOLON
{ CurrentSemanticValue.affectation = new Affectation(ValueStack[ValueStack.Depth-5].variable, ValueStack[ValueStack.Depth-2].expression); montage.CheckAffectationIsValid(ValueStack[ValueStack.Depth-2].expression.dataType, ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-5].variable.name ,LocationStack[LocationStack.Depth-5].StartLine);  montage.AddSymbole(CurrentSemanticValue.affectation);  }
        break;
      case 18: // affectationType -> declaredVariableType
{ CurrentLocationSpan=LocationStack[LocationStack.Depth-1]; CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 19: // affectationType -> /* empty */
{ CurrentSemanticValue.String=null; }
        break;
      case 20: // declaredVariableType -> ID
{ CurrentLocationSpan=LocationStack[LocationStack.Depth-1]; CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String.ToUpper(); }
        break;
      case 21: // expression -> expression, PLUS, expression
{ /*Console.WriteLine("PLUS");*/	CurrentSemanticValue.expression = new Expression(ExpressionSymbole.PLUS, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 22: // expression -> expression, MUL, expression
{ /*Console.WriteLine("MUL");*/		CurrentSemanticValue.expression = new Expression(ExpressionSymbole.MUL, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);}
        break;
      case 23: // expression -> expression, DIV, expression
{ /*Console.WriteLine("DIV");*/		CurrentSemanticValue.expression = new Expression(ExpressionSymbole.DIV, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 24: // expression -> expression, MINUS, expression
{ /*Console.WriteLine("MINUS");*/	CurrentSemanticValue.expression = new Expression(ExpressionSymbole.MINUS, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 25: // expression -> expression, AND, expression
{ /*Console.WriteLine("AND");*/		CurrentSemanticValue.expression = new Expression(ExpressionSymbole.AND, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 26: // expression -> expression, OR, expression
{ /*Console.WriteLine("OR");*/		CurrentSemanticValue.expression = new Expression(ExpressionSymbole.OR, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 27: // expression -> NOT, expression
{ /*Console.WriteLine("NOT");*/		CurrentSemanticValue.expression = new Expression(ExpressionSymbole.NOT, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 28: // expression -> expression, EGALE, expression
{ /*Console.WriteLine("EGALE");*/	CurrentSemanticValue.expression = new Expression(ExpressionSymbole.EGALE, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 29: // expression -> expression, INF, expression
{ /*Console.WriteLine("INF");*/		CurrentSemanticValue.expression = new Expression(ExpressionSymbole.INF, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 30: // expression -> expression, INFEGALE, expression
{ /*Console.WriteLine("INFEGALE");*/ CurrentSemanticValue.expression = new Expression(ExpressionSymbole.INFEGALE, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 31: // expression -> expression, SUP, expression
{ /*Console.WriteLine("SUP");*/		CurrentSemanticValue.expression = new Expression(ExpressionSymbole.SUP, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 32: // expression -> expression, SUPEGALE, expression
{ /*Console.WriteLine("SUPEGALE");*/ CurrentSemanticValue.expression = new Expression(ExpressionSymbole.SUPEGALE, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 33: // expression -> PARENTOPEN, expression, PARENTCLOSE
{ /*Console.WriteLine("PARENT");*/	CurrentSemanticValue.expression = new Expression(ExpressionSymbole.PARENT, ValueStack[ValueStack.Depth-2].expression); }
        break;
      case 34: // expression -> var
{ /*Console.WriteLine("var :" +$1 );*/ montage.IsInSymboleTable(ValueStack[ValueStack.Depth-1].variable.name, LocationStack[LocationStack.Depth-1].StartLine, LocationStack[LocationStack.Depth-1].StartColumn ); CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].variable; }
        break;
      case 35: // expression -> constante
{ /*Console.WriteLine("constante");*/  CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].constante; }
        break;
      case 36: // var -> ID
{ CurrentLocationSpan = LocationStack[LocationStack.Depth-1]; CurrentSemanticValue.variable = new VariableId(ValueStack[ValueStack.Depth-1].String, montage.GetVarTypeString(ValueStack[ValueStack.Depth-1].String)); }
        break;
      case 37: // constante -> INTEGER
{ CurrentLocationSpan = LocationStack[LocationStack.Depth-1]; /*Console.WriteLine("int :" + $1 );*/		CurrentSemanticValue.constante = new VariableInteger(ValueStack[ValueStack.Depth-1].Integer);}
        break;
      case 38: // constante -> FLOAT
{ CurrentLocationSpan = LocationStack[LocationStack.Depth-1]; /*Console.WriteLine("float :" + $1 );*/		CurrentSemanticValue.constante = new VariableFloat(ValueStack[ValueStack.Depth-1].Float);}
        break;
      case 39: // constante -> STRING
{ CurrentLocationSpan = LocationStack[LocationStack.Depth-1]; /*Console.WriteLine("string :" + $1 );*/		CurrentSemanticValue.constante = new VariableString(ValueStack[ValueStack.Depth-1].String);}
        break;
      case 40: // document -> /* empty */
{ CurrentSemanticValue.listBrick=new List<Brick>(); }
        break;
      case 41: // document -> SEPARATOR, listBrick
{ CurrentSemanticValue.listBrick = ValueStack[ValueStack.Depth-1].listBrick; }
        break;
      case 42: // listBrick -> /* empty */
{ CurrentSemanticValue.listBrick = new List<Brick>();  }
        break;
      case 43: // listBrick -> listBrick, brick
{ CurrentSemanticValue.listBrick = ValueStack[ValueStack.Depth-2].listBrick; CurrentSemanticValue.listBrick.Add(ValueStack[ValueStack.Depth-1].brick); }
        break;
      case 44: // brick -> textBloc
{ CurrentSemanticValue.brick = new DeadText(ValueStack[ValueStack.Depth-1].String); }
        break;
      case 45: // brick -> callVar
{ CurrentSemanticValue.brick = ValueStack[ValueStack.Depth-1].variableCall; }
        break;
      case 46: // brick -> choice
{ CurrentSemanticValue.brick = ValueStack[ValueStack.Depth-1].choice; }
        break;
      case 47: // brick -> option
{ CurrentSemanticValue.brick = ValueStack[ValueStack.Depth-1].option; }
        break;
      case 48: // brick -> title
{ CurrentSemanticValue.brick = ValueStack[ValueStack.Depth-1].Title; }
        break;
      case 49: // brick -> condition
{ CurrentSemanticValue.brick = ValueStack[ValueStack.Depth-1].condition; }
        break;
      case 50: // brick -> iteration
{ CurrentSemanticValue.brick = ValueStack[ValueStack.Depth-1].iteration; }
        break;
      case 51: // textBloc -> textBlocElement
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 52: // textBloc -> textBloc, textBlocElement
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-2].String; CurrentSemanticValue.String += (" " + ValueStack[ValueStack.Depth-1].String); }
        break;
      case 53: // textBlocElement -> DEADWORD
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 54: // textBlocElement -> ID
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 55: // textBlocElement -> DOLLAR
{ CurrentSemanticValue.String = "$"; }
        break;
      case 56: // textBlocElement -> PARENTOPEN
{ CurrentSemanticValue.String = "("; }
        break;
      case 57: // textBlocElement -> PARENTCLOSE
{ CurrentSemanticValue.String = ")"; }
        break;
      case 58: // textBlocElement -> SEMICOLON
{ CurrentSemanticValue.String = ";"; }
        break;
      case 59: // textBlocElement -> COMMA
{ CurrentSemanticValue.String = ","; }
        break;
      case 60: // textBlocElement -> COLON
{ CurrentSemanticValue.String = ":"; }
        break;
      case 61: // textBlocElement -> INTEGER
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].Integer.ToString(); }
        break;
      case 62: // textBlocElement -> FLOAT
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].Float.ToString(); }
        break;
      case 63: // textBlocElement -> STRING
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 64: // textBlocElement -> NOUVLIGNE
{ CurrentSemanticValue.String = "$nouvligne"; }
        break;
      case 65: // textBlocElement -> NOUVPARAG
{ CurrentSemanticValue.String = "$nouvparag"; }
        break;
      case 66: // title -> TITLEID, BRACEOPEN, titleContent, BRACECLOSE
{  CurrentSemanticValue.Title = new Title(ValueStack[ValueStack.Depth-4].String, ValueStack[ValueStack.Depth-2].String); }
        break;
      case 67: // titleContent -> titleContentElement
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 68: // titleContent -> titleContent, titleContentElement
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-2].String; CurrentSemanticValue.String += (" " + ValueStack[ValueStack.Depth-1].String); }
        break;
      case 69: // titleContentElement -> DEADWORD
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 70: // titleContentElement -> ID
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 71: // titleContentElement -> DOLLAR
{ CurrentSemanticValue.String = "$"; }
        break;
      case 72: // titleContentElement -> PARENTOPEN
{ CurrentSemanticValue.String = "("; }
        break;
      case 73: // titleContentElement -> PARENTCLOSE
{ CurrentSemanticValue.String = ")"; }
        break;
      case 74: // titleContentElement -> SEMICOLON
{ CurrentSemanticValue.String = ";"; }
        break;
      case 75: // titleContentElement -> COMMA
{ CurrentSemanticValue.String = ","; }
        break;
      case 76: // titleContentElement -> COLON
{ CurrentSemanticValue.String = ":"; }
        break;
      case 77: // titleContentElement -> INTEGER
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].Integer.ToString(); }
        break;
      case 78: // titleContentElement -> FLOAT
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].Float.ToString(); }
        break;
      case 79: // titleContentElement -> STRING
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].String; }
        break;
      case 80: // titleContentElement -> callVar
{ CurrentSemanticValue.String = ValueStack[ValueStack.Depth-1].variableCall.Write(); }
        break;
      case 81: // callVar -> CODEINDIC, BRACEOPEN, ID, BRACECLOSE
{ CurrentSemanticValue.variableCall = new VariableCall(ValueStack[ValueStack.Depth-2].String, montage.isLocalVar(ValueStack[ValueStack.Depth-2].String, LocationStack[LocationStack.Depth-2].StartLine, LocationStack[LocationStack.Depth-2].StartColumn), montage.GetVarTypeString(ValueStack[ValueStack.Depth-2].String)); }
        break;
      case 82: // choice -> CHOIXCKW, PARENTOPEN, ID, COMMA, STRING, PARENTCLOSE, BRACEOPEN, 
               //           listProposition, BRACECLOSE
{ CurrentSemanticValue.choice = new Choice(ValueStack[ValueStack.Depth-7].String, ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-2].listProposition); }
        break;
      case 83: // listProposition -> proposition
{ CurrentSemanticValue.listProposition = new List<Proposition>(); CurrentSemanticValue.listProposition.Add(ValueStack[ValueStack.Depth-1].proposition); }
        break;
      case 84: // listProposition -> listProposition, proposition
{ CurrentSemanticValue.listProposition = ValueStack[ValueStack.Depth-2].listProposition; CurrentSemanticValue.listProposition.Add(ValueStack[ValueStack.Depth-1].proposition); }
        break;
      case 85: // proposition -> PARENTOPEN, ID, COMMA, STRING, PARENTCLOSE, BRACEOPEN, listBrick, 
               //                BRACECLOSE
{ CurrentSemanticValue.proposition = new Proposition(ValueStack[ValueStack.Depth-7].String,ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-2].listBrick); }
        break;
      case 86: // option -> OPTIONCKW, PARENTOPEN, ID, COMMA, STRING, PARENTCLOSE, BRACEOPEN, 
               //           listBrick, BRACECLOSE
{ CurrentSemanticValue.option = new Option(ValueStack[ValueStack.Depth-7].String, ValueStack[ValueStack.Depth-5].String, ValueStack[ValueStack.Depth-2].listBrick); }
        break;
      case 87: // condition -> CONDITIONCKW, PARENTOPEN, expression, PARENTCLOSE, BRACEOPEN, 
               //              listBrick, BRACECLOSE
{ CurrentSemanticValue.condition = new Condition(ValueStack[ValueStack.Depth-5].expression, ValueStack[ValueStack.Depth-2].listBrick); montage.CheckConditionExpressionIsBoolean(ValueStack[ValueStack.Depth-5].expression.dataType, LocationStack[LocationStack.Depth-6].StartLine, LocationStack[LocationStack.Depth-6].StartColumn); }
        break;
      case 88: // iteration -> POURCHAQUECKW, PARENTOPEN, iterator, PARENTCLOSE, BRACEOPEN, 
               //              listBrick, BRACECLOSE
{ CurrentSemanticValue.iteration = new Iteration(ValueStack[ValueStack.Depth-5].iterator.iteratorName, ValueStack[ValueStack.Depth-5].iterator.listData , ValueStack[ValueStack.Depth-2].listBrick);  montage.RemoveSymboles(ValueStack[ValueStack.Depth-5].iterator.GetListVariableOfIterator(montage));}
        break;
      case 89: // iterator -> ID, COLON, ID
{ CurrentSemanticValue.iterator = new IteratorStr(ValueStack[ValueStack.Depth-3].String,new VariableId(ValueStack[ValueStack.Depth-1].String, montage.GetVarTypeStringForIteration(ValueStack[ValueStack.Depth-1].String,  LocationStack[LocationStack.Depth-1].StartLine, LocationStack[LocationStack.Depth-1].StartColumn))); montage.AddSymbole(CurrentSemanticValue.iterator.GetListVariableOfIterator(montage)); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) {}

}
}
