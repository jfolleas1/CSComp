// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  FIDF3675368
// DateTime: 08/06/2017 11:36:43
// UserName: j.folleas
// Input file <ParserComp.y - 08/06/2017 11:36:04>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using RunTime;

namespace Analyser
{
public enum Tokens {error=2,EOF=3,TRUE=4,FALSE=5,DOLLAR=6,
    PLUS=7,MINUS=8,MUL=9,DIV=10,PARENTOPEN=11,PARENTCLOSE=12,
    BRACEOPEN=13,BRACECLOSE=14,AND=15,OR=16,NOT=17,EGALE=18,
    INF=19,INFEGALE=20,SUP=21,SUPEGALE=22,ASSIGN=23,SEMICOLON=24,
    ID=25,STRING=26,INTEGER=27,FLOAT=28};

public struct ValueType
{
        public string String;
        public long Integer;
        public double Float;
		public Affectation affectation;
		public AbstractExpression expression;
		public Variable constante;
		public VariableId variable ;
		public List<Affectation> listAffectation ;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from ParserComp.y - 08/06/2017 11:36:04
    
    public List<Affectation> program = null;
  // End verbatim content from ParserComp.y - 08/06/2017 11:36:04

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[26];
  private static State[] states = new State[43];
  private static string[] nonTerms = new string[] {
      "program", "affectation", "expression", "constante", "var", "listAffectation", 
      "$accept", };

  static Parser() {
    states[0] = new State(new int[]{25,37,3,-2},new int[]{-1,1,-6,3,-2,42,-5,5});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{25,37,3,-3},new int[]{-2,4,-5,5});
    states[4] = new State(-5);
    states[5] = new State(new int[]{23,6});
    states[6] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,7,-5,36,-4,38});
    states[7] = new State(new int[]{24,8,7,9,9,11,10,13,8,15,15,17,16,19,18,21,19,23,20,25,21,27,22,29});
    states[8] = new State(-6);
    states[9] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,10,-5,36,-4,38});
    states[10] = new State(new int[]{7,-7,9,11,10,13,8,-7,15,-7,16,-7,18,-7,19,-7,20,-7,21,-7,22,-7,24,-7,12,-7});
    states[11] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,12,-5,36,-4,38});
    states[12] = new State(-8);
    states[13] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,14,-5,36,-4,38});
    states[14] = new State(-9);
    states[15] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,16,-5,36,-4,38});
    states[16] = new State(new int[]{7,-10,9,11,10,13,8,-10,15,-10,16,-10,18,-10,19,-10,20,-10,21,-10,22,-10,24,-10,12,-10});
    states[17] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,18,-5,36,-4,38});
    states[18] = new State(new int[]{7,9,9,11,10,13,8,15,15,-11,16,-11,18,21,19,23,20,25,21,27,22,29,24,-11,12,-11});
    states[19] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,20,-5,36,-4,38});
    states[20] = new State(new int[]{7,9,9,11,10,13,8,15,15,-12,16,-12,18,21,19,23,20,25,21,27,22,29,24,-12,12,-12});
    states[21] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,22,-5,36,-4,38});
    states[22] = new State(new int[]{7,9,9,11,10,13,8,15,15,-14,16,-14,18,-14,19,-14,20,-14,21,-14,22,-14,24,-14,12,-14});
    states[23] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,24,-5,36,-4,38});
    states[24] = new State(new int[]{7,9,9,11,10,13,8,15,15,-15,16,-15,18,-15,19,-15,20,-15,21,-15,22,-15,24,-15,12,-15});
    states[25] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,26,-5,36,-4,38});
    states[26] = new State(new int[]{7,9,9,11,10,13,8,15,15,-16,16,-16,18,-16,19,-16,20,-16,21,-16,22,-16,24,-16,12,-16});
    states[27] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,28,-5,36,-4,38});
    states[28] = new State(new int[]{7,9,9,11,10,13,8,15,15,-17,16,-17,18,-17,19,-17,20,-17,21,-17,22,-17,24,-17,12,-17});
    states[29] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,30,-5,36,-4,38});
    states[30] = new State(new int[]{7,9,9,11,10,13,8,15,15,-18,16,-18,18,-18,19,-18,20,-18,21,-18,22,-18,24,-18,12,-18});
    states[31] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,32,-5,36,-4,38});
    states[32] = new State(new int[]{7,9,9,11,10,13,8,15,15,-13,16,-13,18,21,19,23,20,25,21,27,22,29,24,-13,12,-13});
    states[33] = new State(new int[]{17,31,11,33,25,37,27,39,28,40,26,41},new int[]{-3,34,-5,36,-4,38});
    states[34] = new State(new int[]{12,35,7,9,9,11,10,13,8,15,15,17,16,19,18,21,19,23,20,25,21,27,22,29});
    states[35] = new State(-19);
    states[36] = new State(-20);
    states[37] = new State(-22);
    states[38] = new State(-21);
    states[39] = new State(-23);
    states[40] = new State(-24);
    states[41] = new State(-25);
    states[42] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-7, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-6});
    rules[4] = new Rule(-6, new int[]{-2});
    rules[5] = new Rule(-6, new int[]{-6,-2});
    rules[6] = new Rule(-2, new int[]{-5,23,-3,24});
    rules[7] = new Rule(-3, new int[]{-3,7,-3});
    rules[8] = new Rule(-3, new int[]{-3,9,-3});
    rules[9] = new Rule(-3, new int[]{-3,10,-3});
    rules[10] = new Rule(-3, new int[]{-3,8,-3});
    rules[11] = new Rule(-3, new int[]{-3,15,-3});
    rules[12] = new Rule(-3, new int[]{-3,16,-3});
    rules[13] = new Rule(-3, new int[]{17,-3});
    rules[14] = new Rule(-3, new int[]{-3,18,-3});
    rules[15] = new Rule(-3, new int[]{-3,19,-3});
    rules[16] = new Rule(-3, new int[]{-3,20,-3});
    rules[17] = new Rule(-3, new int[]{-3,21,-3});
    rules[18] = new Rule(-3, new int[]{-3,22,-3});
    rules[19] = new Rule(-3, new int[]{11,-3,12});
    rules[20] = new Rule(-3, new int[]{-5});
    rules[21] = new Rule(-3, new int[]{-4});
    rules[22] = new Rule(-5, new int[]{25});
    rules[23] = new Rule(-4, new int[]{27});
    rules[24] = new Rule(-4, new int[]{28});
    rules[25] = new Rule(-4, new int[]{26});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> /* empty */
{ Console.WriteLine("empty Prgm"); }
        break;
      case 3: // program -> listAffectation
{ Console.WriteLine("listAffectation");  program = ValueStack[ValueStack.Depth-1].listAffectation; }
        break;
      case 4: // listAffectation -> affectation
{ CurrentSemanticValue.listAffectation = new List<Affectation>(); CurrentSemanticValue.listAffectation.Add(ValueStack[ValueStack.Depth-1].affectation); Console.WriteLine("Affectation du bout"); }
        break;
      case 5: // listAffectation -> listAffectation, affectation
{ CurrentSemanticValue.listAffectation=ValueStack[ValueStack.Depth-2].listAffectation; CurrentSemanticValue.listAffectation.Add(ValueStack[ValueStack.Depth-1].affectation); Console.WriteLine(" liste Affectation "); }
        break;
      case 6: // affectation -> var, ASSIGN, expression, SEMICOLON
{  Console.WriteLine("affection") ; CurrentSemanticValue.affectation = new Affectation(ValueStack[ValueStack.Depth-4].variable, ValueStack[ValueStack.Depth-2].expression); }
        break;
      case 7: // expression -> expression, PLUS, expression
{ Console.WriteLine("PLUS"); CurrentSemanticValue.expression = new Expression(ExpressionSymbole.PLUS, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 8: // expression -> expression, MUL, expression
{ Console.WriteLine("MUL"); CurrentSemanticValue.expression = new Expression(ExpressionSymbole.MUL, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression);}
        break;
      case 9: // expression -> expression, DIV, expression
{ Console.WriteLine("DIV"); CurrentSemanticValue.expression = new Expression(ExpressionSymbole.DIV, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 10: // expression -> expression, MINUS, expression
{ Console.WriteLine("MINUS"); CurrentSemanticValue.expression = new Expression(ExpressionSymbole.MINUS, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 11: // expression -> expression, AND, expression
{ Console.WriteLine("AND"); CurrentSemanticValue.expression = new Expression(ExpressionSymbole.AND, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 12: // expression -> expression, OR, expression
{ Console.WriteLine("OR"); CurrentSemanticValue.expression = new Expression(ExpressionSymbole.OR, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 13: // expression -> NOT, expression
{ Console.WriteLine("NOT");CurrentSemanticValue.expression = new Expression(ExpressionSymbole.NOT, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 14: // expression -> expression, EGALE, expression
{ Console.WriteLine("EGALE");CurrentSemanticValue.expression = new Expression(ExpressionSymbole.EGALE, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 15: // expression -> expression, INF, expression
{ Console.WriteLine("INF");CurrentSemanticValue.expression = new Expression(ExpressionSymbole.INF, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 16: // expression -> expression, INFEGALE, expression
{ Console.WriteLine("INFEGALE");CurrentSemanticValue.expression = new Expression(ExpressionSymbole.INFEGALE, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 17: // expression -> expression, SUP, expression
{ Console.WriteLine("SUP");CurrentSemanticValue.expression = new Expression(ExpressionSymbole.SUP, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 18: // expression -> expression, SUPEGALE, expression
{ Console.WriteLine("SUPEGALE");CurrentSemanticValue.expression = new Expression(ExpressionSymbole.SUPEGALE, ValueStack[ValueStack.Depth-3].expression, ValueStack[ValueStack.Depth-1].expression); }
        break;
      case 19: // expression -> PARENTOPEN, expression, PARENTCLOSE
{ Console.WriteLine("PARENT"); CurrentSemanticValue.expression = new Expression(ExpressionSymbole.PARENT, ValueStack[ValueStack.Depth-2].expression); }
        break;
      case 20: // expression -> var
{ Console.WriteLine("var"); CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].variable; }
        break;
      case 21: // expression -> constante
{ Console.WriteLine("constante");  CurrentSemanticValue.expression = ValueStack[ValueStack.Depth-1].constante; }
        break;
      case 22: // var -> ID
{ Console.WriteLine("var :" +ValueStack[ValueStack.Depth-1].String ); CurrentSemanticValue.variable = new VariableId(ValueStack[ValueStack.Depth-1].String); }
        break;
      case 23: // constante -> INTEGER
{ Console.WriteLine("int :" + ValueStack[ValueStack.Depth-1].Integer ); CurrentSemanticValue.constante = new VariableInteger(ValueStack[ValueStack.Depth-1].Integer);}
        break;
      case 24: // constante -> FLOAT
{ Console.WriteLine("float :" + ValueStack[ValueStack.Depth-1].Float ); CurrentSemanticValue.constante = new VariableFloat(ValueStack[ValueStack.Depth-1].Float);}
        break;
      case 25: // constante -> STRING
{ Console.WriteLine("string :" + ValueStack[ValueStack.Depth-1].String ); CurrentSemanticValue.constante = new VariableString(ValueStack[ValueStack.Depth-1].String);}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) {}

}
}
