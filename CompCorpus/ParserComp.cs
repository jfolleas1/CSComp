// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  FIDF3675368
// DateTime: 06/06/2017 17:17:22
// UserName: j.folleas
// Input file <ParserComp.y - 06/06/2017 17:17:11>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Analyser
{
public enum Tokens {error=2,EOF=3,PLUS=4,MINUS=5,MUL=6,
    DIV=7,TRUE=8,FALSE=9,AND=10,OR=11,NOT=12,
    EGALE=13,INF=14,INFEGALE=15,SUP=16,SUPEGALE=17,ASSIGN=18,
    DOLLAR=19,ID=20,STRING=21,INTEGER=22,FLOAT=23};

public struct ValueType
{
        public string String;
        public long Integer;
        public double Float;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from ParserComp.y - 06/06/2017 17:17:11
    
    
  // End verbatim content from ParserComp.y - 06/06/2017 17:17:11

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[20];
  private static State[] states = new State[32];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "expression", "var", "constante", };

  static Parser() {
    states[0] = new State(new int[]{12,26,20,29,22,31,3,-2},new int[]{-1,1,-3,3,-4,28,-5,30});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{4,4,6,6,7,8,5,10,10,12,11,14,13,16,14,18,15,20,16,22,17,24,3,-3});
    states[4] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,5,-4,28,-5,30});
    states[5] = new State(new int[]{4,-4,6,6,7,8,5,-4,10,-4,11,-4,13,-4,14,-4,15,-4,16,-4,17,-4,3,-4});
    states[6] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,7,-4,28,-5,30});
    states[7] = new State(-5);
    states[8] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,9,-4,28,-5,30});
    states[9] = new State(-6);
    states[10] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,11,-4,28,-5,30});
    states[11] = new State(new int[]{4,-7,6,6,7,8,5,-7,10,-7,11,-7,13,-7,14,-7,15,-7,16,-7,17,-7,3,-7});
    states[12] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,13,-4,28,-5,30});
    states[13] = new State(new int[]{4,4,6,6,7,8,5,10,10,-8,11,-8,13,16,14,18,15,20,16,22,17,24,3,-8});
    states[14] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,15,-4,28,-5,30});
    states[15] = new State(new int[]{4,4,6,6,7,8,5,10,10,-9,11,-9,13,16,14,18,15,20,16,22,17,24,3,-9});
    states[16] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,17,-4,28,-5,30});
    states[17] = new State(new int[]{4,4,6,6,7,8,5,10,10,-11,11,-11,13,-11,14,-11,15,-11,16,-11,17,-11,3,-11});
    states[18] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,19,-4,28,-5,30});
    states[19] = new State(new int[]{4,4,6,6,7,8,5,10,10,-12,11,-12,13,-12,14,-12,15,-12,16,-12,17,-12,3,-12});
    states[20] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,21,-4,28,-5,30});
    states[21] = new State(new int[]{4,4,6,6,7,8,5,10,10,-13,11,-13,13,-13,14,-13,15,-13,16,-13,17,-13,3,-13});
    states[22] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,23,-4,28,-5,30});
    states[23] = new State(new int[]{4,4,6,6,7,8,5,10,10,-14,11,-14,13,-14,14,-14,15,-14,16,-14,17,-14,3,-14});
    states[24] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,25,-4,28,-5,30});
    states[25] = new State(new int[]{4,4,6,6,7,8,5,10,10,-15,11,-15,13,-15,14,-15,15,-15,16,-15,17,-15,3,-15});
    states[26] = new State(new int[]{12,26,20,29,22,31},new int[]{-3,27,-4,28,-5,30});
    states[27] = new State(new int[]{4,4,6,6,7,8,5,10,10,-10,11,-10,13,16,14,18,15,20,16,22,17,24,3,-10});
    states[28] = new State(-16);
    states[29] = new State(-18);
    states[30] = new State(-17);
    states[31] = new State(-19);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-3,4,-3});
    rules[5] = new Rule(-3, new int[]{-3,6,-3});
    rules[6] = new Rule(-3, new int[]{-3,7,-3});
    rules[7] = new Rule(-3, new int[]{-3,5,-3});
    rules[8] = new Rule(-3, new int[]{-3,10,-3});
    rules[9] = new Rule(-3, new int[]{-3,11,-3});
    rules[10] = new Rule(-3, new int[]{12,-3});
    rules[11] = new Rule(-3, new int[]{-3,13,-3});
    rules[12] = new Rule(-3, new int[]{-3,14,-3});
    rules[13] = new Rule(-3, new int[]{-3,15,-3});
    rules[14] = new Rule(-3, new int[]{-3,16,-3});
    rules[15] = new Rule(-3, new int[]{-3,17,-3});
    rules[16] = new Rule(-3, new int[]{-4});
    rules[17] = new Rule(-3, new int[]{-5});
    rules[18] = new Rule(-4, new int[]{20});
    rules[19] = new Rule(-5, new int[]{22});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> /* empty */
{ Console.WriteLine("empty Prgm"); }
        break;
      case 3: // program -> expression
{ Console.WriteLine("statement"); }
        break;
      case 4: // expression -> expression, PLUS, expression
{ Console.WriteLine("PLUS"); }
        break;
      case 5: // expression -> expression, MUL, expression
{ Console.WriteLine("MUL"); }
        break;
      case 6: // expression -> expression, DIV, expression
{ Console.WriteLine("DIV"); }
        break;
      case 7: // expression -> expression, MINUS, expression
{ Console.WriteLine("MINUS"); }
        break;
      case 8: // expression -> expression, AND, expression
{}
        break;
      case 9: // expression -> expression, OR, expression
{}
        break;
      case 10: // expression -> NOT, expression
{}
        break;
      case 11: // expression -> expression, EGALE, expression
{}
        break;
      case 12: // expression -> expression, INF, expression
{}
        break;
      case 13: // expression -> expression, INFEGALE, expression
{}
        break;
      case 14: // expression -> expression, SUP, expression
{}
        break;
      case 15: // expression -> expression, SUPEGALE, expression
{}
        break;
      case 16: // expression -> var
{ Console.WriteLine("var"); }
        break;
      case 17: // expression -> constante
{ Console.WriteLine("constante"); }
        break;
      case 18: // var -> ID
{ Console.WriteLine("id :" +ValueStack[ValueStack.Depth-1].String ); }
        break;
      case 19: // constante -> INTEGER
{ Console.WriteLine("int :" + ValueStack[ValueStack.Depth-1].Integer ); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) {}

}
}
