
// ==========================================================================
//  GPPG error listing for yacc source file <ParserComp.y - 06/06/2017 17:05:10>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  FIDF3675368
//  DateTime: 06/06/2017 17:05:31
//  UserName: j.folleas
// ==========================================================================



%namespace Analyser
%output=ParserComp.cs

%{
    
    
%}

%start program

%union {
        public string String;
        public long Integer;
        public double Float;
}

// Defining Tokens
%token PLUS
%token MINUS
%token MUL
%token DIV
%token TRUE FALSE
%token AND OR NOT
%token EGALE INF INFEGALE SUP SUPEGALE
%token ASSIGN

%token <String> ID
%token <String> STRING
%token <Integer> INTEGER
%token <Float> FLOAT


// Priority
%left PLUS MINUS
%left DIV MUL

%% // Grammar rules section
// Error: NonTerminal symbol "ET" has no productions
// Error: NonTerminal symbol "OU" has no productions
// Warning: Terminating OU fixes the following size-1 NonTerminal set
   // {OU}
// Error: There are 2 non-terminating NonTerminal Symbols
   //  {ET, OU}
// Warning: Terminating ET fixes the following size-1 NonTerminal set
   // {ET}
// ------------------------------------------------------------------

program  : /* nothing */    { Console.WriteLine("empty Prgm"); }
         | expression       { Console.WriteLine("statement"); }
         ;

expression  :       expression PLUS expression      { Console.WriteLine("PLUS"); }
            |       expression MUL expression       { Console.WriteLine("MUL"); }
            |       expression DIV expression       { Console.WriteLine("DIV"); }
            |       expression MINUS expression     { Console.WriteLine("MINUS"); }
			|       expression ET expression
            |       expression OU expression
            |       NOT expression
            |       expression EGALE expression
            |       expression INF expression
            |       expression INFEGALE expression
            |       expression SUP expression
            |       expression SUPEGALE expression
            |       var                             { Console.WriteLine("var"); }
            |       constante                       { Console.WriteLine("constante"); }
            ;

var     :   ID      { Console.WriteLine("id :" +$1 ); }
        ;

constante   :   INTEGER   { Console.WriteLine("int :" + $1 ); }
            ;

%%

// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) {}

// ==========================================================================

